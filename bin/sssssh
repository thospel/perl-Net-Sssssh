#!/usr/bin/perl -w
use strict;
use warnings;

our $VERSION = "1.000";

use FindBin qw($Bin $Script);
use Getopt::Long 2.24 qw(:config bundling require_order);
use Socket qw();
use Carp;
use Sys::Hostname;
use Errno qw(EINTR);
use Time::Local qw(timegm);
use Data::Dumper;
$Data::Dumper::Indent   = 1;
$Data::Dumper::Sortkeys = 1;
my ($msghdr_error, $IPPROTO_IP);
BEGIN {
    # Can't use "require" later on since Socket::MsgHdr has INIT blocks
    eval sprintf(qq(#line %d "%s"\nuse Socket::MsgHdr; 1), __LINE__, __FILE__)
        or $msghdr_error = $@ || "Unknown error loading Socket::MsgHdr\n";
    # IPPROTO_IP exists in Socket, but not in really old ones
    $IPPROTO_IP = 0;
    for my $name (qw(IPPROTO_IP)) {
        eval "\$$name = Socket::$name()";
    }
}
($Bin, $Script) = __FILE__ =~ m{^(.*)/(.+)\z} or
    die "Could not parse ", __FILE__ if $Script eq "-" && __FILE__ ne "-";

$SIG{PIPE} = "IGNORE";

# Unfortunately not a builtin in Socket nor Socket::MsgHdr.
# This is the linux value, can be different on other systems
my $IP_PKTINFO = 8;

my $ssh = "/usr/bin/ssh";
my $verbose = undef;
my $debug   = 0;
my $default_local_bind  = "127.0.0.1";
my $default_remote_bind = "127.0.0.1";

# How long a server UDP socket lingers without traffic
# How long an errored TCP connection tries to push lingering output
my $TIMEOUT = 120;
my $SOCKS_TIMEOUT = 120;
# How much we can typically fit into our communication channel
my $LINE_BLOCK_SIZE = 16384;
my $BLOCK_SIZE = 65536;
my $MARKER_BLOCK = 65536;
my $LISTEN_BACKLOG = 128;
my $KEEPALIVE = 300;

my $LOW_WATER  = 3e6;
my $HIGH_WATER = 4e6;

my @settings = sort qw(EPOCH TIMEOUT KEEPALIVE LOW_WATER HIGH_WATER);
my %settings;
$settings{$settings[$_]} = $_ for 0..$#settings;

my $STUFFED = "GoNow";

my $KEEP	= "K";	# Keepalive packet/Ack
my $SET		= "S";	# sets a server variable
my $START	= "1";
my $DAEMON	= "2";	# Tell server to daemonize
my $LINE_EOF	= "0";	# Close a LineProtocol
my $MARKER	= "";

my $ERROR_ECONNREFUSED	= "Connection refused";
my $ERROR_ENETUNREACH	= "Network is unreachable";
my $ERROR_ETIMEDOUT	= "Timed out";
my $ERROR_ERESOLV	= "Could not resolve host";

my $role = @ARGV ? "client" : "server";
my $role_peer = $role eq "server" ? "client" : "server";
my (@tcp_local, @udp_local, @tcp_remote, @udp_remote);
my (@socks_local, @socks_remote);

my $msghdr = $msghdr_error ? undef : Socket::MsgHdr->new();

# Determine some system settings
my $hostname = hostname();
my $me;
if ($^O eq "MSWin32") {
    require Win32;
    $me = Win32::LoginName();
} else {
    if (my $user = $ENV{LOGNAME}) {
        if (defined(my $uid = getpwnam($user))) {
            $me = $user if $> == $uid;
        }
    }
    $me ||= getpwuid $>;
}
die "Can't determine who I am" if !$me;

# Client stuffer
my $POST_STUFFER = sprintf(qq(#line %d "%s"\n%s),
                           __LINE__, __FILE__, '
BEGIN {
    eval {
        open($SAVED_STDIN, "<&", \*STDIN);
        open(STDIN, "<", "/dev/null") || die "NULL: $!";
        1;
    } or do {
        print STDERR $@ || "Unknown error\n";
        exit 255;
    };
}
');
my $PRE_STUFFER = sprintf(qq(#line %d "%s"\n%s),
                           __LINE__, __FILE__, '
BEGIN { $^W = 1 }

my $SAVED_STDIN;
open(STDIN, "<&", $SAVED_STDIN) || die "Could not dup STDIN: $^E";
close($SAVED_STDIN) || die "Could not close SAVED_STDIN: $^E";
$| = 1;
print "' . $STUFFED . '";
');

package Events;
# A small event core
use Carp;
use Errno qw(EINTR);

my @timers = (undef);
my $read_mask  = "";
my $write_mask = "";
my $error_mask = "";
my (%read_refs, %write_refs, %error_refs, @immediate, $now);

sub add_read(*$ ) {
    defined(my $fd = fileno(shift)) || croak "Not a filehandle";
    ::caller_info("add_read $fd") if $debug;
    croak "Descriptor $fd already selected for read" if $read_refs{$fd};
    $read_refs{$fd} = shift;
    vec($read_mask, $fd, 1) = 1;
}

sub add_write(*$ ) {
    defined(my $fd = fileno(shift)) || croak "Not a filehandle";
    ::caller_info("add_write $fd") if $debug;
    croak "Descriptor $fd already selected for write" if $write_refs{$fd};
    $write_refs{$fd} = shift;
    vec($write_mask, $fd, 1) = 1;
}

sub add_error(*$ ) {
    defined(my $fd = fileno(shift)) || croak "Not a filehandle";
    ::caller_info("add_error $fd") if $debug;
    croak "Descriptor $fd already selected for error" if $error_refs{$fd};
    $error_refs{$fd} = shift;
    vec($error_mask, $fd, 1) = 1;
}

sub delete_read(*) {
    defined(my $fd = fileno(shift)) || croak "Not a filehandle";
    ::caller_info("delete_read $fd") if $debug;
    croak "Descriptor $fd wasn't selected for read" unless $read_refs{$fd};
    # This strange assign before delete is to poison the reference @work in
    # sub mainloop may still have
    $read_refs{$fd} = undef;
    delete $read_refs{$fd};
    if (%read_refs) {
        vec($read_mask, $fd, 1) = 0;
        $read_mask =~ s/\x00+\z//;
    } else {
        $read_mask = "";
    }
}

sub delete_write(*) {
    defined(my $fd = fileno(shift)) || croak "Not a filehandle";
    ::caller_info("delete_write $fd") if $debug;
    croak "Descriptor $fd wasn't selected for write " unless $write_refs{$fd};
    # This strange assign before delete is to poison the reference @work in
    # sub mainloop may still have
    $write_refs{$fd} = undef;
    delete $write_refs{$fd};
    if (%write_refs) {
        vec($write_mask, $fd, 1) = 0;
        $write_mask =~ s/\x00+\z//;
    } else {
        $write_mask = "";
    }
}

sub delete_error(*) {
    defined(my $fd = fileno(shift)) || croak "Not a filehandle";
    ::caller_info("delete_error $fd") if $debug;
    croak "Descriptor $fd wasn't selected for error " unless $error_refs{$fd};
    # This strange assign before delete is to poison the reference @work in
    # sub mainloop may still have
    $error_refs{$fd} = undef;
    delete $error_refs{$fd};
    if (%error_refs) {
        vec($error_mask, $fd, 1) = 0;
        $error_mask =~ s/\x00+\z//;
    } else {
        $error_mask = "";
    }
}

{
    no warnings "once";
    *IO::Handle::add_read     = \&add_read;
    *IO::Handle::add_write    = \&add_write;
    *IO::Handle::add_error    = \&add_error;
    *IO::Handle::delete_read  = \&delete_read;
    *IO::Handle::delete_write = \&delete_write;
    *IO::Handle::delete_error = \&delete_error;
}

sub mainloop {
    while (1) {
        Timer::run_now() if @timers > 1 || @immediate;
        my $timeout = @timers > 1 ?
            $timers[1][0]-$now > 0 ? $timers[1][0]-$now : 0 :
            %read_refs || %write_refs || %error_refs ? undef : last;
        if ((select(my $r = $read_mask, my $w = $write_mask, my $e = $error_mask, $timeout) || next) > 0) {
            $$_ && $$_->() for
                \@read_refs{ grep vec($r, $_, 1), keys %read_refs},
                \@write_refs{grep vec($w, $_, 1), keys %write_refs},
                \@error_refs{grep vec($e, $_, 1), keys %error_refs};
        } elsif ($! != EINTR) {
            die "Select failed: $^E";
        }
    }
    ::info("Exiting mainloop") if $verbose;
}

package Timer;
use Scalar::Util qw(weaken);
use Carp;
use Time::HiRes qw(clock_gettime CLOCK_REALTIME CLOCK_MONOTONIC );

# Timer indices
sub TIME	() { 0 };
sub INDEX	() { 1 };
sub CODE	() { 2 };	# Must come after INDEX

my $CLOCK_TYPE;
my $CLOCK_TYPE_NAME =
    eval { $CLOCK_TYPE = CLOCK_MONOTONIC; "MONOTONIC" } ||
    eval { $CLOCK_TYPE = CLOCK_REALTIME;  "REAL" } ||
    die "Time::HiRes doesn't even have CLOCK_REALTIME";

sub realtime {
    return clock_gettime(CLOCK_REALTIME);
}

my $BASE_TIME = Timer->realtime();

# Timers are kept in a simple binary heap @timers
sub new {
    my ($class, $time, $fun) = @_;

    $now = clock_gettime($CLOCK_TYPE);
    $time = $time + $now;
    $time = 0.5+1/3-$time if $time < 1;
    my $i = @timers;
    while ($i > 1 && $time < $timers[$i >> 1][TIME]) {
        weaken($timers[$i] = $timers[$i >> 1]);
        $i = ($timers[$i][INDEX] = $i) >> 1;
    }
    my $timer = bless [$time, $i, $fun], $class;
    weaken($timers[$i] = $timer);
    return $timer;
}

sub delete : method {
    my ($timer) = @_;

    my $i = $timer->[INDEX];
    if (!$i) {
        croak "Not a timer reference" unless defined($i) && $i == 0;
        # Could be a timer sitting on the expired queue in run_now
        $#$timer = INDEX if @$timer > INDEX;
        return;
    }
    $timer->[INDEX] = 0;
    # Last element or beyond...
    if ($i >= $#timers) {
        croak "Not a timer reference" if $i > $#timers;
        pop(@timers);
        return;
    }
    my $time = $timers[-1][TIME];
    if ($i > 1 && $time < $timers[$i >> 1][TIME]) {
        # percolate to root
        do {
            weaken($timers[$i] = $timers[$i >> 1]);
            $i = ($timers[$i][INDEX] = $i) >> 1;
        } while ($i > 1 && $time < $timers[$i >> 1][TIME]);
    } else {
        # percolate to leafs
        my $n = @timers-2;
        my $l = $i * 2;
        while ($l < $n) {
            if ($timers[$l][TIME] < $time) {
                if ($timers[$l+1][TIME] < $timers[$l][TIME]) {
                    weaken($timers[$i] = $timers[$l+1]);
                    $timers[$i][INDEX] = $i;
                    $i = $l+1;
                } else {
                    weaken($timers[$i] = $timers[$l]);
                    $timers[$i][INDEX] = $i;
                    $i = $l;
                }
            } elsif ($timers[$l+1][TIME] < $time) {
                weaken($timers[$i] = $timers[$l+1]);
                $timers[$i][INDEX] = $i;
                $i = $l+1;
            } else {
                last;
            }
            $l = $i * 2;
        }
        if ($l == $n && $timers[$l][TIME] < $time) {
            weaken($timers[$i] = $timers[$l]);
            $timers[$i][INDEX] = $i;
            $i = $l;
        }
    }
    weaken($timers[$i] = pop @timers);
    $timers[$i][INDEX] = $i;
}

sub DESTROY {
    shift->delete;
}

sub run_now {
    # @immediate must be persistent so no timers get lost if a callback dies
    goto EXPIRED if @timers <= 1 ||
        $timers[1][TIME] > ($now = clock_gettime($CLOCK_TYPE));
    while (@timers > 2) {
        push @immediate, $timers[1];
        $timers[1][INDEX] = 0;

        my $time = $timers[-1][TIME];
        my $n = @timers-2;
        my $i = 1;
        my $l = 2;
        while ($l < $n) {
            if ($timers[$l][TIME] < $time) {
                if ($timers[$l+1][TIME] < $timers[$l][TIME]) {
                    weaken($timers[$i] = $timers[$l+1]);
                    $timers[$i][INDEX] = $i;
                    $i = $l+1;
                } else {
                    weaken($timers[$i] = $timers[$l]);
                    $timers[$i][INDEX] = $i;
                    $i = $l;
                }
            } elsif ($timers[$l+1][0] < $time) {
                weaken($timers[$i] = $timers[$l+1]);
                $timers[$i][INDEX] = $i;
                $i = $l+1;
            } else {
                last;
            }
            $l = $i * 2;
        }
        if ($l == $n && $timers[$l][TIME] < $time) {
            weaken($timers[$i] = $timers[$l]);
            $timers[$i][INDEX] = $i;
            $i = $l;
        }
        weaken($timers[$i] = pop @timers);
        $timers[$i][INDEX] = $i;
        goto EXPIRED if $timers[1][TIME] > $now;
    }
    if (@timers == 2) {
        $timers[1][INDEX] = 0;
        push @immediate, pop @timers;
    }
  EXPIRED:
    my $fun;
    $fun->[CODE] && $fun->[CODE]->() while $fun = shift @immediate;
    $now = clock_gettime($CLOCK_TYPE);
}

package LineProtocol;
use Errno qw(EINTR EAGAIN EWOULDBLOCK);
use Carp;

my %process = (
    $KEEP		=> \&process_KEEP,
    $SET		=> \&process_SET,

    $DAEMON		=> \&process_DAEMON,
);

sub new {
    my ($class, $socket_in, $socket_out) = @_;

    binmode($socket_in);
    binmode($socket_out);

    $socket_in ->blocking(0);
    $socket_out->blocking(0);

    my $line = bless {
        in		=> "",	# input buffer
        out		=> "",	# output buffer
        out_sent	=> 0,	# from here the output buffer has not been sent
        markers		=> [],	# list of markers in the output buffer
        pending_length	=> 0,	# Nr bytes to be output, including not buffered
        pending		=> [],	# queue of objects with unbuffered data
        socket_in	=> $socket_in,
        socket_out	=> $socket_out,
        keepalive	=> undef,	# keepalive timer
        ack_position    => -1,  # position of first ack in output buffer
        marker_in	=> "A",	# last marker seen on input
        marker_out	=> "A",	# last marker sent on output
        marker_acked	=> "A", # Last acknowledged marker
        utime_offset	=> 0,	# Estimated round trip time in microsecond

        EPOCH		=> undef,
        TIMEOUT		=> $TIMEOUT,
        KEEPALIVE	=> $KEEPALIVE,
        LOW_WATER	=> $LOW_WATER,
        HIGH_WATER	=> $HIGH_WATER,

    }, $class;
    # $line->id_init;

    $socket_in->add_read(sub { $line->read });
    $line->{keepalive} = Timer->new($line->{KEEPALIVE}, sub { $line->keepalive } );

    return $line;
}

sub ack {
    my ($line) = @_;

    if ($line->{ack_position} >= $line->{out_sent}) {
        # Try to fixup the old ack
        my $marker = substr($line->{out}, $line->{ack_position}, length($line->{marker_in})+1);
        my ($m) = $marker =~ /^(\S+) / or die "Unexpected old marker '$marker'";
        if (length $m == length $line->{marker_in}) {
            # ::info("Replacing ack $m by $line->{marker_in}") if $debug;
            substr($line->{out}, $line->{ack_position}, length($line->{marker_in})) = $line->{marker_in};
            return;
        }
    }
    # The previous ack can't be reused. Send a new one
    $line->keepalive;
}

sub mark {
    my ($line) = @_;

    my $last_marker = @{$line->{markers}} && $line->{markers}[-1][1];
    if (length($line->{out}) - $last_marker >= $MARKER_BLOCK) {
        # Marker
        $line->{out} .= "\1";
        ++$line->{pending_length};
        ++$line->{marker_out};
        ::info("Set marker $line->{marker_out}") if $debug;
        push @{$line->{markers}}, [$line->{marker_out}, length($line->{out})];
    }
}

sub line_writer {
    my ($line) = @_;

    while (1) {
        while (length($line->{out}) - $line->{out_sent} < $LINE_BLOCK_SIZE-1) {
            my $pending = shift @{$line->{pending}} || last;
            $pending->line_write($LINE_BLOCK_SIZE);
            $line->mark;
        }
        if (length($line->{out}) <= $line->{out_sent}) {
            die "Short out" if length($line->{out}) < $line->{out_sent};
            die "Empty out";
        }
        die "Long out" if length($line->{out}) - $line->{out_sent} > $line->{pending_length};

        my $end_marker = @{$line->{markers}} && $line->{markers}[-1][1] == length($line->{out}) ? 1 : 0;
        $line->{out} .= "\1" if !$end_marker;
        my $rc = $line->{socket_out}->syswrite($line->{out}, $BLOCK_SIZE, $line->{out_sent});
        if (!defined $rc) {
            substr($line->{out}, -1, 1, "") if !$end_marker;
            return if $! == EINTR || $! == EAGAIN || $! == EWOULDBLOCK;
            die "Could not write to $role_peer: $^E"
        }
        die "Zero write. Is this even possible ?" if $rc == 0;
        #if ($rc > $LINE_BLOCK_SIZE) {
        #    ::info("Increase LINE_BLOCK_SIZE from %d to %d",
        #         $LINE_BLOCK_SIZE, $rc)  if $debug;
        #    $LINE_BLOCK_SIZE = $rc;
        #}
        $line->{pending_length} -= $rc;
        $line->{out_sent} += $rc;
        if (!$end_marker) {
            if ($line->{out_sent} >= length($line->{out}) -1 ) {
                ++$line->{marker_out};
                ++$line->{pending_length};
                push @{$line->{markers}}, [$line->{marker_out}, $line->{out_sent}];
                # ::info("Force marker $line->{marker_out}") if $debug;
            } else {
                substr($line->{out}, -1, 1, "");
            }
        }
        ::info("wrote %d bytes to %s (%d left): %s",
             $rc, $role_peer, $line->{pending_length}, ::display(substr($line->{out}, -$rc))) if
                 $debug;
        my $shifted = 0;
        my $dropped = 0;
        for my $marker (@{$line->{markers}}) {
            $marker->[1] -= $shifted;
            if ($marker->[1] <= $line->{out_sent}) {
                my $length = $marker->[1];
                $line->{saved_frames}{$marker->[0]} = substr($line->{out}, 0, $length, "");
                $line->{saved_bytes}	+= $length;
                $shifted	+= $length;
                $line->{out_sent}	-= $length;
                $line->{ack_position}	-= $length;
                ++$dropped;
                #::info("Save frame[%d] %s: %d bytes, %d saved, %d left, %d unsent",
                #     $dropped, $marker->[0], $length, $line->{saved_bytes},
                #     length($line->{out}), length($line->{out}) - $line->{out_sent}) if $debug;
            }
        }
        splice(@{$line->{markers}}, 0, $dropped);

        $line->unsuspend if $line->{pending_length} <= $line->{LOW_WATER} && $line->{suspended};
        if ($line->{pending_length} <= 0) {
            die "Unexpected non empty out" if $line->{out} ne "";
            die "Unexpected negative pending_length" if $line->{pending_length} < 0;
            $line->{keepalive} =
                Timer->new($line->{KEEPALIVE}, sub { $line->keepalive });
            $line->{socket_out}->delete_write;
            return;
        }
    }
}

sub line_message {
    my $out   = \shift;
    my $command = shift;

    # One initial BER byte + proto = 2 bytes
    my $length = 2;
    $length += length for @_;
    ++$length if $length >= 128;
    ++$length if $length >= 128*128;
    # Don't accept more than 3 BER bytes (~ 2**21 byte message)
    croak "Message too long" if $length >= 128*128*128;

    $$out .= pack("wa", $length, $command);
    $$out .= $_ for @_;
    # ::info("Constructed %s: %s", $command, unpack("H*", substr($$out, -$length)));
    return $length;
}

sub write : method {
    my $line = shift;

    if ($line->{keepalive}) {
        $line->{keepalive} = undef;
        $line->{socket_out}->add_write( sub { $line->line_writer });
    }
    $line->{pending_length} += line_message($line->{out}, @_) if @_;
    $line->mark;
    if ($line->{pending_length} > $line->{HIGH_WATER} && !$line->{suspended}) {
        # Try to pass the buck to the OS
        $line->line_writer;
        # The OS didn't fall for it. Reduce incoming traffic
        $line->suspend if $line->{pending_length} > $line->{HIGH_WATER} && !$line->{suspended};
    }
}

sub keepalive {
    my ($line) = @_;

    $line->{ack_position} = length $line->{out};
    $line->write($KEEP, sprintf("%s %.0f %.0f",
                                $line->{marker_in},
                                (Timer->realtime() - $BASE_TIME)*1e6,
                                $line->{utime_offset}));
    if ($line->{ack_position} >= 0) {
        my ($length, $command) = unpack("wa", substr($line->{out}, $line->{ack_position}, 4));
        $command eq $KEEP || die "Unpexpected proto '$command'";
        $line->{ack_position} += length pack("wa", $length, $command);
        my $marker = substr($line->{out}, $line->{ack_position}, length($line->{marker_in})+1);
        $marker eq "$line->{marker_in} " || die "Unexpected marker '$marker'";
    }
}

sub read : method {
    my ($line) = @_;

    my $rc = $line->{socket_in}->sysread($line->{in}, $BLOCK_SIZE, length($line->{in}));
    if (!defined $rc) {
        return if $! == EINTR || $! == EAGAIN || $! == EWOULDBLOCK;
        die "Could not read from $role_peer: $^E"
    }
    if ($rc == 0) {
        ::info("exit") if $verbose;
        exit 0;
    }
    ::info("read %d bytes from $role_peer: %s", $rc, ::display(substr($line->{in}, -$rc)))
        if $debug;
    while ($line->{in} =~ /^(\x01|[\x80-\xff]{0,2}[\x00-\x7f].)/s) {
        my ($length, @frame) = unpack("waa", $1);
        # ::info("%s: needs %d bytes, have %d bytes", $frame[0],
        #     $length, length($line->{in})) if $debug;
        last if length($line->{in}) < $length;
        $frame[1] = substr($line->{in}, 0, $length, "");
        # ::info("Read %s: %s", $frame[0], unpack("H*", $frame[1]));
        substr($frame[1], 0, length $1, "");

        if ($frame[0] eq $MARKER) {
            ++$line->{marker_in};
            # ::info("Got marker $line->{marker_in}") if $debug;
            # Avoid acking pure acks
            for my $frame (@{$line->{commands}}) {
                if ($frame->[0] ne $KEEP) {
                    $line->ack();
                    last;
                }
            }
            for my $frame (@{$line->{commands}}) {
                ::info("Processing %s: '%s' (%d bytes)",
                     $frame->[0], ::display($frame->[1]), length $frame->[1]) if
                         $debug;
                my $fun = $process{$frame->[0]} ||
                    die "No handler for proto '$frame->[0]'";
                $fun->($line, $frame->[1], $frame->[0]);
            }
            @{$line->{commands}} = ();
        } else {
            push @{$line->{commands}}, \@frame;
        }

    }
}

sub process_KEEP {
    my $line  = shift;

    # Transit time is of course meaningless if the clocks aren't
    # synchronized very well. offset tries to compensate for that

    my ($ack, $utime, $uoffset) = split " ", $_[0];
    until ($line->{marker_acked} eq $ack) {
        ++$line->{marker_acked};
        exists $line->{saved_frames}{$line->{marker_acked}} ||
            die "Do not have frame $line->{marker_acked} saved -> $ack";
        $line->{saved_bytes} -= length $line->{saved_frames}{$line->{marker_acked}};
        delete $line->{saved_frames}{$line->{marker_acked}};
    }

    $line->{utime_offset} = (Timer->realtime() - $line->{EPOCH})*1e6 -$utime || 1;
    if ($uoffset) {
        ::info("Keepalive ack=%s, saved bytes=%d, transit=%.3f ms, roundtrip=%.3f ms, offset=%.0f ms",
             $ack,
             $line->{saved_bytes},
             $line->{utime_offset}/1e3,
             ($line->{utime_offset}+$uoffset)/1e3,
             ($line->{utime_offset}-$uoffset)/2e3) if $debug;
    } else {
        ::info("Keepalive ack=%s, saved bytes=%d, transit=%.3f ms",
             $ack, $line->{saved_bytes}, $line->{utime_offset}/1e3) if $debug;
    }
}

sub process_SET {
    my $line  = shift;

    my $i = unpack("C", substr($_[0], 0, 1, ""));
    my $name = $settings[$i] || die "Unknown variable $i";
    $line->{$name} = $_[0];
    ::info("Set %s=%s", $name, $_[0]) if $debug;
}

sub process_DAEMON {
    my $line  = shift;
}

sub set_peer {
    my ($line, $name, $value) = @_;

    my $i = $settings{$name};
    defined $i || croak "Unknown global variable '$name'";
    $line->write($SET, pack("C", $i), $value);
}

package main;
sub _info {
    local ($!, $^E);
    my $role = ucfirst(shift);
    if (!@_) {
        my (undef, $filename, $line) = caller(1);
        @_ = ("$filename $line");
    }
    my $format = shift;
    $format =~ s/\n?\z/\n/;
    if (!@_) {
        @_ = ($format);
        $format = "%s";
    }
    my $time = Timer->realtime;
    my $itime = int($time);
    my ($sec, $min, $hour, $day, $mon, $year) = localtime($itime);
    my $gtime = timegm($sec, $min, $hour, $day, $mon, $year);
    my $offset = ($gtime - $itime) / 60;
    my $sign = "+";
    if ($offset < 0) {
        $sign = "-";
        $offset = -$offset;
    }
    my $hoffset = $offset / 60;
    my $moffset = $offset % 60;
    printf(STDERR "%04d-%02d-%02d %02d:%02d:%06.3f %s%02d%02d %s: $format",
           $year+1900, $mon+1, $day, $hour, $min, $time-$itime+$sec,
           $sign, $hoffset, $moffset,
           $role, @_);
}

sub info {
    _info($role, @_);
}

sub caller_info {
    my $format = shift;
    my (@lines, $line, $i);
    push @lines, $line while $line = (caller(++$i))[2];
    if (@_) {
        info("$format [line %s]", "@lines");
    } else {
        info("$format [line @lines]");
    }
}

my %display = (
    "\r"	=> '\r',
    "\n"	=> '\n',
    "\t"	=> '\t',
    "\0"	=> '\0',
    "\\"	=> '\\',
    );
sub display {
    my ($data) = @_;

    my $long = length $data > 30;
    $data = substr($data, 0, 37) if $long;
    # $data =~ s{([^\x20-\x7e])}{sprintf('\x%02x', ord $1)}eg;
    my $hex = unpack("H*", $data);
    $data =~ s{([^\x20-\x7e])}{$display{$1} || "."}eg;
    $data .= " ($hex)";
    $data .= " ..." if $long;
    return $data;
}

sub client {
    my ($socket_in, $socket_out) = @_;

    eval {
        my $line = LineProtocol->new($socket_in, $socket_out);
        # $line->set_peer(debug      => $server_debug   || 0);
        # $line->set_peer(verbose    => $server_verbose || 0);
        $line->set_peer(EPOCH      => $BASE_TIME);
        $line->set_peer(TIMEOUT    => $TIMEOUT);
        $line->set_peer(KEEPALIVE  => $KEEPALIVE);
        $line->set_peer(LOW_WATER  => $LOW_WATER);
        $line->set_peer(HIGH_WATER => $HIGH_WATER);

        $line->write($DAEMON);

        Events->mainloop();
    };
    die "\u$role: $@" if $@;
}

sub server {
    my ($socket_in, $socket_out) = @_;
    eval {
        my $line = LineProtocol->new($socket_in, $socket_out);

        $line->set_peer(EPOCH => $BASE_TIME);

        Events->mainloop();
    };
    die "\u$role: $@" if $@;
}

sub run {
    my $stdin  = shift || die "Assertion: run: No stdin callback";
    my $stdout = shift || die "Assertion: run: No stdout callback";
    my $cmd = shift  || die "Assertion: run: No Command";

    pipe(my $rd0, my $wr0) || die "Could not pipe: $^E";
    pipe(my $rd1, my $wr1) || die "Could not pipe: $^E";
    defined(my $pid = fork()) || die "could not fork: $^E";

    if (!$pid) {
        # Child
        eval {
            close $wr0;
            close $rd1;
            open(STDIN,  "<&", $rd0) || die "Could not dup STDIN: $^E";
            close $rd0;
            open(STDOUT, ">&", $wr1) || die "Could not dup STDOUT: $^E";
            close $wr1;
            exec($cmd, @_) || die "Could not exec $cmd: $^E";
        };
        die $@ || "No error";
    }
    # Parent
    close $rd0;
    close $wr1;
    $wr0->autoflush(1);
    return $wr0, $rd1;
}

if ($role eq "server") {
    server(\*STDIN, \*STDOUT);
    die "Assertion: \u$role fell off the mainloop";
}

# From here on we are the client

my $stuff = 1;
my $remote_perl = "/usr/bin/perl";
GetOptions("client_lib=s" => \my @client_lib,
           "ssh=s"		=> \$ssh,
           "M|master"		=> \my $ssh_master,
           "perl=s"		=> \$remote_perl,
           "server_verbose!"	=> \my $server_verbose,
           "client_verbose!"	=> \my $client_verbose,
           "verbose!"		=> \$verbose,
           "server_debug!"	=> \my $server_debug,
           "client_debug!"	=> \my $client_debug,
           "debug!"		=> \$debug,
           "local_bind|bind=s"	=> \$default_local_bind,
           "remote_bind=s"	=> \$default_remote_bind,
           "timeout=o"		=> \$TIMEOUT,
           "keepalive=o"	=> \$KEEPALIVE,
           "low_water=o"	=> \$LOW_WATER,
           "high_water=o"	=> \$HIGH_WATER,
           "L=s"		=> \@tcp_local,
           "l=s"		=> \@udp_local,
           "R=s"		=> \@tcp_remote,
           "r=s"		=> \@udp_remote,
           "D=s"		=> \@socks_local,
           "d=s"		=> \@socks_remote,
           "stuff!"		=> \$stuff,
           "version!"		=> \my $version,
           "U|unsafe!"		=> \my $unsafe,
           "h|help!"		=> \my $help) ||
    die "Could not parse your command line. Try $Script -h\n";

if ($version) {
    print<<"EOF";
sssssh (Ton Utils) $VERSION
EOF
    exit 0;
}

if ($help) {
    require Config;
    $ENV{PATH} .= ":" unless $ENV{PATH} eq "";
    $ENV{PATH} = "$ENV{PATH}$Config::Config{'installscript'}";
    exec("perldoc", "-F", $unsafe ? "-U" : (), $0) || exit 1;
    # make parser happy
    %Config::Config = ();
}

@ARGV || die "Missing remote host argument, Try $Script -h\n";
if ($stuff) {
    @ARGV == 1 || die "Spurious arguments\n";
}

$verbose        = $debug        if $debug        && !defined $verbose;
$client_verbose = $client_debug if $client_debug && !defined $client_verbose;
$server_verbose = $server_debug if $server_debug && !defined $server_verbose;

$server_debug   = $client_debug   = 1 if $debug;
$server_verbose = $client_verbose = 1 if $verbose;

# We are the cient
$verbose = $client_verbose;
$debug   = $client_debug;

my @ssh = ($ssh, "-v", $ssh_master ? "-M" : (), "-e", "none");

die "timeout $TIMEOUT must be positive\n" if $TIMEOUT <= 0;
die "keepalive $KEEPALIVE must be positive\n" if $KEEPALIVE <= 0;

my ($wr0, $rd1) = run(\&server_stdin, \&server_stdout, @ssh,
                      $stuff ? (shift, $remote_perl) :
                          (@ARGV == 1 ? $Bin/$Script : (), @ARGV));
if ($stuff) {
    my $self = "$Bin/$Script";
    open(my $fh, "<", $self) || die "Could not open $self: $^E";
    my $content = qq(#line 1 "$Bin/$Script"\n);
    $content .= do { local $/; <$fh> };
    $content =~ s/\n__END__\n.*/\n/s || die "Could not find __END__";
    # Remove full line comments, but not #line statements.
    # Leave the \n so line numbers in error messages keep working
    $content =~ s/^[^\S\n]*#(?![^\S\n]*line\s).*//mg;
    # Drop leading spaces. Saves about 20%
    # (less of course if the ssh does compression, as it does by default)
    $content =~ s/^[^\S\n]+//mg;

    # Change a few variables in the server code
    my %replace =
        (verbose	=> $server_verbose,
         debug		=> $server_debug,
         role		=> "server",

         TIMEOUT	=> $TIMEOUT,
         KEEPALIVE	=> $KEEPALIVE,
         LOW_WATER	=> $LOW_WATER,
         HIGH_WATER	=> $HIGH_WATER,
     );
    while (my ($name, $value) = each %replace) {
        local $Data::Dumper::Indent  = 0;
        local $Data::Dumper::Purity  = 1;
        local $Data::Dumper::Varname = $name;
        $value = Dumper($value);
        $value =~ s/\$\Q$name\E1\b/\$$name/g || die "Assertion: No VAR1";
        # info("Value=<$value>") if $verbose;
        $content =~ s{^([^\S\n]*(?:my|our)\s*)\$\Q$name\E\s*=[^;\n]*;[^\S\n]*\n}{$1$value\n}m || die "Could not set $name";
    }

    print($wr0 $PRE_STUFFER) || die "Write error:$^E";
    for my $client_lib (map split(/:/), @client_lib) {
        print($wr0 qq(use lib "$client_lib";\n)) || die "Write error:$^E";
    }
    # print($wr0 qq(\$Script="\$Script"\n)) || die "Write error:$^E";
    print($wr0 $content) || die "Write error:$^E";
    print($wr0 $POST_STUFFER) || die "Write error:$^E";
    my $line = "";
    while (length($line) < length($STUFFED)) {
        alarm(60);
        my $rc = sysread($rd1, $line, length($STUFFED)-length $line, length $line);
        if (!defined $rc) {
            next if $! == EINTR;
            die "Read error: $^E";
        }
        die "Unexpected EOF" if $rc == 0;
    }
    alarm(0);
    $line eq $STUFFED || die "Bad server confirm $line";
    ::info("Remote server received code") if $debug;
}
client($rd1, $wr0);

#my $ssh_retry = 0;
#my $ssh_max_retry = 300;
#my $ssh_timer = Timer->new($ssh_retry, \&ssh_connect);
#Events->mainloop();

__END__
=head1 NAME

sssssh - proxy connections over ssh (Simple Socket Server over SSH)

=head1 SYNOPSIS

    sssssh remote_host { tunnel specification }

    tunnel specification can be:
       -L local_bind:local_port:remote_host:remote_port
       -l local_bind:local_port:remote_host:remote_port
       -R remote_bind:remote_port:local_host:local_port
       -r remote_bind:remote_port:local_host:local_port
       -D local_bind:local_port
       -d remote_bind:remote_port

       -M Pass -M to ssh

    sssssh [--version] [--unsafe] [-U] [-h] [--help]

=head1 DESCRIPTION

bla bla bla. To be written

=head1 OPTIONS

=over 4

=item X<ssh>--ssh program

Name of the connection program to use. Defaults to F</usr/bin/ssh>

=item X<perl>--perl program

Path of the remote perl executable. Defaults to F</usr/bin/perl>.

=item X<verbose>--verbose

Turn on debug messages

=item X<server_verbose>--server_verbose

Turn on debug messages on the server (the remote side of the ssh connection)

=item X<client_verbose>--client_verbose

Turn on debug messages on the client (the local side of the ssh connection)

=item X<help>-h, --help

Show this help.

=item X<unsafe>-U, --unsafe

Allow even root to run the perldoc.
Remember, the reason this is off by default is because it B<IS> unsafe.

=item X<version>--version

Print version info.

=back

=head1 EXAMPLE

bla bla. To be written

=head1 SEE ALSO

L<ssh(1)>

=head1 AUTHOR

Ton Hospel, E<lt>sssssh@ton.iguana.beE<gt>

=head1 COPYRIGHT AND LICENSE

Copyright (C) 2015 by Ton Hospel

This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself, either Perl version 5.6.1 or,
at your option, any later version of Perl 5 you may have available.

=cut

Implementation notes:

c: client
s: server
h: host
p: port
d: data
_: protocol (udp, tcp etc)

lower case: source
upper case: dest

(c_, ch, cp, cH, cP) -> (s_, sh sp, sH, sP)
     sh, sp determined by server
     sH = cH if sH=""

(ch,cp,cH,cP,sP)

Server HASH: (sH,sP)(sp) -> (id, ch, cp, cH ?)

cmdline: id -> c_,cH,cP,s_,sH,sP

Line protocol: UDP
   Forward announce: -> (id cH?, sH, sP) cH only if sH = 0.0.0.0
   Forward data:     -> (id,ch,cp,cH?,d) cH only if cH = 0.0.0.0
   Remote announce:  -> (id sh, sp)  [reply with resolved sh, sp]
   Remote data is just Forward data in the other direction
                     <- (id,sH,sP,sh?,d) sh only if ch = 0.0.0.0 (=> sh = 0)

Line protocol: TCP
   Forward announce: -> (id, sH, sP)
   Forward connect:  -> (id, id*,cH?) cH only if sH = 0.0.0.0

   Remote announce:  -> (id, sh, sp)  [reply with resolved sh, sp]
   Remote accept is just a Forward connect in the other direction:
                      <- (id, id*,sh?) sh only if ch = 0.0.0.0 (=> sh = 0)
   data:     <-> (id*,d)
   close:    <-> (id*, reason)

# Naming convention:
xxx_port: numeric port number
xxx_host: textual host name
xxx_ip:   packed IP address
xxx_addr: packed port/ip
