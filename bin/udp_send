#!/usr/bin/perl -w
use strict;
use warnings;

my $VERSION = "1.000";

# ip fou add port 5556 ipproto 4 dev fou0
# ip link set tunl0 up


# ip fou del port 5556

my $IP_VERSION = 4;
my $PROTO_UDP = 17;
my $IHL = 5;
my $UDP_HEADER = 8;
my $DF = 2;
my $TTL = 64;

my $FREE_BSD = $^O eq "freebsd";
# This is the linux value, can be different on other systems
# FreeBSD uses IP_RECVDSTADDR
my $IP_PKTINFO = $FREE_BSD ? 7 : 8;
# IPPROTO_IP exists in Socket, but not in really old ones
my $IPPROTO_IP = 0;

use Getopt::Long 2.24 qw(:config bundling require_order);

use IO::Socket::INET;
use IO::Socket qw(inet_aton inet_ntoa sockaddr_in);
use Socket::MsgHdr;

die "Could not parse your command line. Try $0 -h\n" unless
    GetOptions("f|foo!"		=> \my $foo,
               "l|local=s"	=> \my $local,
               "n|nonl!"	=> \my $no_nl,
               "version!"	=> \my $version,
               "U|unsafe!"	=> \my $unsafe,
               "h|help!"	=> \my $help);
$no_nl = $no_nl ? "" : "\n";

my ($host, $port, $txt) = @ARGV;

my $msghdr = Socket::MsgHdr->new();
my $s;
if (0) {
    $s = IO::Socket::INET->new(
        # The Peer options trigger a connect which in turn forces a bind
        Proto	=> "udp",
        PeerHost	=> $host,
        PeerPort	=> $port) || die "Could not create socket: $!";
} else {
    $s = IO::Socket::INET->new(
	# Trick to force a bind
        # (The first send would cause a bind anyways)
        LocalPort	=> "00",
        Proto		=> "udp") || die "Could not create socket: $!";
    my $to = pack_sockaddr_in($port, inet_aton($host));
    $msghdr->name($to);
    if ($local) {
        my $from = inet_aton($local);
        if ($FREE_BSD) {
            $msghdr->cmsghdr($IPPROTO_IP, $IP_PKTINFO, $from);
        } else {
            # Testing indicates only the second field (ipi_spec_dst)
            # really matters
            $msghdr->cmsghdr($IPPROTO_IP, $IP_PKTINFO, pack("x4a4a4", $from, $from));
        }
    }
}

my $mysockaddr = getsockname($s);
my ($lport, $laddr) = sockaddr_in($mysockaddr);
$laddr = inet_ntoa($laddr);
print STDERR "Local $laddr:$lport\n";

if (0) {
    my $s1 = IO::Socket::INET->new(
        Proto	=> "udp",
        LocalHost	=> $laddr,
        LocalPort	=> $lport,
        PeerHost	=> $host,
        PeerPort	=> $port) || die "Could not create socket: $!";
}

$txt =~ s/\n?\z/$no_nl\0/;
chop $txt;

if (!$foo) {
    if (0) {
        print $s $txt;
    } else {
        $msghdr->buf($txt);
        $s->sendmsg($msghdr);
    }
    exit;
}

my $length = length $txt;
# my $src = "10.253.4.1";
# my $dst = "127.0.0.1";
#my $sprt = 49154;
#my $dprt = 1234;
my $src = "1.2.3.4";
my $dst = "10.253.0.8";
my $sprt = 49154;
my $dprt = 1234;

$src = inet_aton($src) // die "Could not look up $src";
$dst = inet_aton($dst) // die "Could not look up $dst";

my $id = int rand 2**16;
my $flags = $DF;

my $header = pack("CCnnnCCx2a4a4",
                  $IP_VERSION << 4 | $IHL,
                  0,
                  $length + $IHL * 4 + $UDP_HEADER,
                  $id,
                  $DF << 13 | 0,
                  $TTL,
                  $PROTO_UDP,
                  $src,
                  $dst,
);
my $sum = unpack("%32n*", $header);
while ($sum > 0xffff) {
    my $carry = $sum >> 16;
    $sum &= 0xffff;
    $sum += $carry;
}
substr($header, 10, 2, pack("n", 0xffff - $sum));

my $pseudo10 = pack("a4a4xC", $src, $dst, $PROTO_UDP);
my $udp_header = pack("nnn", $sprt, $dprt, $length + $UDP_HEADER);
$txt .= "\0";

$sum = unpack("%32n*", $pseudo10) + unpack("%32n*", $udp_header) + unpack("%32n*", $txt) + $length + $UDP_HEADER;

while ($sum > 0xffff) {
    my $carry = $sum >> 16;
    $sum &= 0xffff;
    $sum += $carry;
}
chop $txt;
my $buffer = $header . $udp_header . pack("n", 0xffff - $sum) . $txt;

if (0) {
    my ($ihl, $ecn, $length, $id, $fragment, $ttl, $proto, $chksum, $src, $dst) = unpack("CCnnnCCna4a4", $buffer);
    my $version = $ihl >> 4;
    $ihl &= 0xf;
    my $flags = $fragment >> 13;
    $fragment &= 0x1fff;
    # only TCP4
    $version == $IP_VERSION || die "Wrong version $version";
    # Only UDP
    $proto == $PROTO_UDP || die "Wrong proto $proto";
    # Sanity check on buffer
    length($buffer) == $length ||
        die "Wrong length ", length($buffer);
    # We don't handle IP options (yet)
    $ihl == $IHL || die "Wrong ihl $ihl";
    # Too many hops
    $ttl || die "Bad TTL $ttl";
    # Don't handle fragments (gragment offset)
    die "Unexpected fragment $fragment" if $fragment;
    # Don't handle fragments (MF flag set)
    die "Bad flags $flags" if $flags & 0x4;

    my $pseudo10 = pack("a4a4xC", $src, $dst, $proto);

    $ihl *= 4;
    my $header = substr($buffer, 0, $ihl, "");
    $length -= $ihl;

    # No buffer padding needed since length($header) is even
    my $sum = unpack("%32n*", $header);
    # We (currently) don't check the header chksum since we assume we only
    # handle local packets which cannot fail
    while ($sum > 0xffff) {
        my $carry = $sum >> 16;
        $sum &= 0xffff;
        $sum += $carry;
    }
    $sum == 0xffff || die "Bad UDP checksum $sum";

    $src = inet_ntoa($src);
    $dst = inet_ntoa($dst);

    my $dscp = $ecn >> 3;
    $ecn &= 0x7;
    print "HEADER: DSCP=$dscp, ECN=$ecn, ID=$id, FLAGS=$flags, FRAGMENT=$fragment, TTL=$ttl, CHKSUM=$chksum, SUM=$sum, SRC=$src, DST=$dst\n";

    # Must have space for UDP header
    die "Bad UDP length $length" if $length < $UDP_HEADER;

    # Pad buffer 0 so a last single byte still gets processed as "n"
    $sum = unpack("%32n*", $buffer . "\x0") + unpack("%32n*", $pseudo10) + $length;
    my ($sprt, $dprt, $udp_len, $udp_chksum) = unpack("nnnn", substr($buffer, 0, $UDP_HEADER, ""));
    $udp_len == $length || die "Inconsistent UDP length";
    $length -= $UDP_HEADER;

    # We (currently) don't check the UDP chksum since we assume we only
    # handle local packets which cannot fail
    while ($sum > 0xffff) {
        my $carry = $sum >> 16;
        $sum &= 0xffff;
        $sum += $carry;
    }
    $sum == 0xffff || die "Bad UDP chksum $sum";

    print "SPRT=$sprt, DPRT=$dprt, LEN=$udp_len, CHK=$udp_chksum\n";
}
if (0) {
    print $s $buffer;
} else {
    $msghdr->buf($buffer);
    $s->sendmsg($msghdr);
}
