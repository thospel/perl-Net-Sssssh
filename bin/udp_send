#!/usr/bin/perl -w
use strict;
use warnings;

our $VERSION = "1.000";

# ip fou add port 5556 ipproto 4

# ip fou del port 5556

use FindBin qw($Script);
our $Bin;

# If the program runs as /foobar/bin/program, find libraries in /foobar/lib
BEGIN {
    # Even on windows FindBin uses / in the reported path
    $Bin = $FindBin::Bin;
    $Bin =~ s{/+\z}{};
    $Bin =~
        ($^O eq "MSWin32" ?
         qr{^((?:[A-Z]:)?(?:/[a-zA-Z0-9_:.~ -]+)*)/[a-zA-Z0-9_.-]+/*\z} :
         qr{^((?:/[a-zA-Z0-9_:.-]+)*)/[a-zA-Z0-9_.-]+/*\z}) ||
         die "Could not parse bin directory '$Bin'";
    # Use untainted version of lib
    require lib;
    # Support a simple --blib option for pre-install testing
    "lib"->import(@ARGV && $ARGV[0] eq "--blib" ? shift && "$1/blib/lib" : "$1/lib");
}

use Getopt::Long 2.24 qw(:config bundling require_order);

use IO::Socket qw(MSG_TRUNC MSG_CTRUNC
                  unpack_sockaddr_in pack_sockaddr_in inet_ntoa inet_aton);
use IO::Socket::INET qw();
# use IO::Socket qw(inet_aton inet_ntoa unpack_sockaddr_in pack_sockaddr_in);
use Socket::MsgHdr;

use Net::Sssssh
    qw(IP_RECVDSTADDR IP_PKTINFO IPPROTO_IP IP_RECVTTL IP_TTL
       parse_udp_address fou_encode string_from_value);

die "Could not parse your command line. Try $0 -h\n" unless
    GetOptions("f|fou=s"	=> \my $fou,
               "d|debug!",	=> \my $debug,
               "a|answer!"	=> \my $answer,
               "l|local=s"	=> \my $local,
               "n|nonl!"	=> \my $no_nl,
               "v|verbose!"	=> \my $verbose,
               "version!"	=> \my $version,
               "U|unsafe!"	=> \my $unsafe,
               "h|help!"	=> \my $help);

if ($version) {
    ## no critic (UselessNoCritic RequireCheckedSyscalls)
    print <<"EOF";
dhcp_test $VERSION (DHCP::Test $DHCP::Test::Package::VERSION)
EOF
    exit 0;
}
if ($help) {
    require Config;
    $ENV{PATH} .= ":" unless $ENV{PATH} eq "";
    $ENV{PATH} = "$ENV{PATH}$Config::Config{'installscript'}";
    exit system("perldoc", "-F", $unsafe ? "-U" : (), "$Bin/$Script") ? 1 : 0;
    # make parser happy
    %Config::Config = ();
}

@ARGV == 3 || die "Syntax: udp_send [options] host port text\n";
my ($host, $port, $txt) = @ARGV;

$no_nl = $no_nl ? "" : "\n";
$txt =~ s/\n?\z/$no_nl/;

my ($lport, $laddr);
if ($local) {
    ($lport, $laddr) = unpack_sockaddr_in(
        parse_udp_address($local, "Local", "", 0, 1)) ||
            die "Assertion: Cannot unpack packed local '$local'";
    $local = inet_ntoa($laddr);
}

my $msghdr = Socket::MsgHdr->new();

if ($fou) {
    $fou = parse_udp_address($fou, "Fou", "127.0.0.1");
    my ($fport, $faddr) = unpack_sockaddr_in($fou) or
        die "Assertion: Could not unpack parse_udp_address result fro '$fou'";
    my $s = IO::Socket::INET->new(
        # The Peer options trigger a connect which in turn forces a bind
        Proto		=> "udp",
        PeerHost	=> inet_ntoa($faddr),
        PeerPort	=> $fport) || die "Could not create socket: $!";
    if (!$local) {
        $laddr = inet_aton("1.2.3.4");
        $lport = 49154;
    }
    my $buffer = fou_encode(pack_sockaddr_in($lport, $laddr),
                            parse_udp_address("$host:$port"),
                            $txt, $verbose && \*STDERR);
    if ($msghdr) {
        $msghdr->buf($buffer);
        $s->sendmsg($msghdr) || die "Could not sendmsg(): $^E";
    } else {
        my $rc = syswrite($s, $buffer) //
            die "Could not write to socket: $^E";
        $rc == length $buffer ||
            die "Truncated write to socket";
    }

} else {
    if ($msghdr) {
        my $s = IO::Socket::INET->new(
            Proto	=> "udp",
            # Trick to force a bind (The first send would cause a bind anyways)
            LocalPort	=> "00") || die "Could not create socket: $!";
        my $to = parse_udp_address("$host:$port");
        $msghdr->name($to);
        if ($local) {
            if (defined IP_RECVDSTADDR) {
                $msghdr->cmsghdr(IPPROTO_IP, IP_RECVDSTADDR, $local);
            } else {
                # I cannot find any documentation about what the addresses
                # exactly mean. Testing indicates only the second field
                # (ipi_spec_dst) really matters
                $msghdr->cmsghdr(IPPROTO_IP, IP_PKTINFO, pack("x4a4a4", $local, $local));
            }
        }

        $msghdr->buf($txt);
        $s->sendmsg($msghdr) || die "Could not sendmsg(): $!";
        if ($answer) {
            if (defined IP_RECVDSTADDR) {
                setsockopt($s, IPPROTO_IP, IP_RECVDSTADDR, 1) ||
                    die "setsockopt(IPPROTO_IP, IP_RECVDSTADDR): $^E";
            } elsif (defined IP_PKTINFO) {
                setsockopt($s, IPPROTO_IP, IP_PKTINFO, 1) ||
                    die "setsockopt(IPPROTO_IP, IP_PKTINFO): $^E";
            } else {
                die "Assertion: Neither IP_RECVDSTADDR nor IP_PKTINFO";
            }
            setsockopt($s, IPPROTO_IP, IP_RECVTTL, 1) ||
                die "setsockopt(IPPROTO_IP, IP_RECVTTL): $^E";
            $msghdr->controllen(256);
            $msghdr->namelen(256);
            $msghdr->buflen(2**16);
            $s->recvmsg($msghdr) || die "Could nor recvmsg: $!";

            my $buffer = $msghdr->buf;

            # Socket::MsgHdr 0.05 does in fact not set flags after recvmsg
            die "Yikes! Buffer was truncated\n" if
                $msghdr->flags & MSG_TRUNC;
            die "Yikes! Ancillary data was truncated\n" if
                $msghdr->flags & MSG_CTRUNC;

            my ($local, $msg_dst, $ttl);
            my @cmsg = $msghdr->cmsghdr();
            while (my ($level, $type, $data) = splice(@cmsg, 0, 3)) {
                $level == IPPROTO_IP || next;
                if (defined IP_RECVDSTADDR && $type == IP_RECVDSTADDR) {
                    # FreeBSD
                    length $data == 4 ||
                        die "Unexpected IP_RECVDSTADDR length";
                    $local = inet_ntoa($data);
                    $msg_dst = $local;
                } elsif (defined IP_PKTINFO && $type == IP_PKTINFO) {
                    # Linux
                    length $data == 12 ||
                        die "Unexpected IP_PKTINFO length";
                    my ($interface, $dst, $to) = unpack("Ia4a4", $data);
                    $local = inet_ntoa($to);
                    $msg_dst = inet_ntoa($dst);
                } elsif ($type == IP_TTL) {
                    length $data == 4 || die "Unexpected IP_TTL length";
                    $ttl = unpack("I", $data);
                }
            }

            $local // die "Assertion: No local addr";
            $ttl // die "Assertion: No TTL";

            my $sender = $msghdr->name;
            my ($peer_port, $peer) = unpack_sockaddr_in($sender);
            $peer = inet_ntoa($peer);
            print "Answer: From $peer:$peer_port, To $local [$msg_dst]\n";
            print "Received: TTL $ttl, ", length($buffer), " bytes ",
                string_from_value($buffer), "\n";
        }
    } else {
        my $s = IO::Socket::INET->new(
            # The Peer options trigger a connect which in turn forces a bind
            Proto	=> "udp",
            $local ? (LocalPort => $lport, LocalHost => $local) : (),
            PeerHost	=> $host,
            PeerPort	=> $port) || die "Could not create socket: $!";

        my $mysockaddr = getsockname($s);
        my ($lport, $laddr) = unpack_sockaddr_in($mysockaddr);
        $laddr = inet_ntoa($laddr);
        print STDERR "Sent from $laddr:$lport\n";
        my $rc = syswrite($s, $txt) //
            die "Could not write to socket: $^E";
        $rc == length $txt ||
            die "Truncated write to socket";
    }
}
