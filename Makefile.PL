#!/usr/bin/perl -w
# $Id: Makefile.PL 4944 2012-01-04 12:30:35Z hospelt $
use 5.008000;
use strict;
use warnings;
use ExtUtils::MakeMaker;

our $VERSION = '1.000';

# Allows to suppress all program installation with -n (library only)
use Getopt::Std;
our ($opt_n, $opt_y);
getopts("ny") || die "Usage: $0 [-n] [-y]\n";

open(my $fh, "-|", $^X, "t/lib_extract") || die "Could not run 't/lib_extract': $^E";
chomp(my @modules = map "lib/Net/Sssssh/$_.pm", split " ", do { local $/; <$fh>});

my @programs_to_install;

if (!$opt_n || $opt_y) {
    print <<EOT	## no critic (UselessNoCritic InputOutput::RequireCheckedSyscalls)
Note that you can avoid the following questions by passing
the '-n' or '-y' option to 'Makefile.PL'.

EOT
        if !$opt_y;

    # Only do this site_perl substitution for non binary extensions!
    my $site_lib = "$ExtUtils::MakeMaker::Config{siteprefix}/lib/site_perl";
    if ($ExtUtils::MakeMaker::Config{installsitelib} ne $site_lib &&
        grep $_ eq $site_lib, @INC) {
        print <<EOT	## no critic (UselessNoCritic InputOutput::RequireCheckedSyscalls)
Your default perl library install directory is $ExtUtils::MakeMaker::Config{installsitelib}.
This works fine but has the drawback that the library files will not be found
anymore if the perl version gets upgraded. Since $site_lib is in
your default library search path I can use that instead

EOT
            if !$opt_y;
        # arch directories needed to get packlist into /usr/local/lib/site_perl
        map $ExtUtils::MakeMaker::Config{$_} = $site_lib, qw(installsitelib sitelibexp sitearchexp installsitearch) if
            $opt_y ||
            prompt("Use $site_lib as default library install directory ?", "y") =~ /^y/i;
    }

    print <<EOT	## no critic (UselessNoCritic InputOutput::RequireCheckedSyscalls)
This package comes with programs that I can try
to install in $ExtUtils::MakeMaker::Config{installsitebin}.

EOT
        if !$opt_y;
    my %programs = (
        "bin/sssssh"	=> "forward ports",
    );
    for my $program (sort keys %programs) {
        push @programs_to_install, $program if
            $opt_y ||
            prompt("Install $program, a utility to $programs{$program} ?", "y") =~ /^y/i;
    }
}

settings();

WriteMakefile
    (NAME		=> 'Net::Sssssh',
     # finds $VERSION, requires EU::MM from perl >= 5.5
     VERSION_FROM	=> 'lib/Net/Sssssh/Package.pm',
     eval {
         ## no critic (UselessNoCritic MagicNumbers)
         ExtUtils::MakeMaker->VERSION(6.55_01);
         1;
     } ? (BUILD_REQUIRES	=> {
         # To generate README.md when editing source. Not needed for build
         # "Pod::Markdown::Github"	=> "0.02",
         # Only for the tests
         "Test::More"	=> "0.01",
     }) : (),
     PREREQ_PM		=> {
         "Exporter::Tidy"	=> "0.06",
         "Socket::MsgHdr"	=> "0.04",
         # You probably also want a good implementation like Term::ReadLine::Gnu
         "Term::ReadLine"	=> "0.0",
     },
     ABSTRACT		=> 'Simple Socket Server over SSH',
     AUTHOR		=> 'Ton Hospel <Net-Sssssh@ton.iguana.be>',
     $^O eq "MSWin32" ? (
         PM_FILTER	=> '$(PERL) -p -e1',
     ) : (),
     clean		=> {
         FILES => "\$(DISTNAME).ppd ppm cover_db nytprof nytprof.out* md5-versions.old @modules",
     },
     #LICENSE		=> 'perl',
     #Value must be from legacy list of licenses here
     #http://search.cpan.org/perldoc?Module%3A%3ABuild%3A%3AAPI
 );

# START MY
# autogenerated by release_pm
BEGIN {
    package MY;

    use vars qw(%postamble);

    $postamble{ppm} = <<'EOT';
ppm: $(DISTNAME).ppd
	makeppd.pl "--perl=$(PERLRUN)" --min_version=1.016 "--zip=$(ZIP)" "--tar=$(TAR)" "--compress=$(COMPRESS)" --leave=ppm "--objects=$(OBJECT)" $(DISTNAME).ppd $(VERSION)
EOT

    $postamble{ppm3} = <<'EOT';
ppm3: $(DISTNAME).ppd
	makeppd.pl "--perl=$(PERLRUN)" --min_version=1.016 "--zip=$(ZIP)" "--tar=$(TAR)" "--compress=$(COMPRESS)" --ppm_version=3 --leave=ppm3 "--objects=$(OBJECT)" $(DISTNAME).ppd $(VERSION)
EOT

    $postamble{ppm4} = <<'EOT';
ppm4: $(DISTNAME).ppd
	makeppd.pl "--perl=$(PERLRUN)" --min_version=1.016 "--zip=$(ZIP)" "--tar=$(TAR)" "--compress=$(COMPRESS)" --ppm_version=4 --leave=ppm4 "--objects=$(OBJECT)" $(DISTNAME).ppd $(VERSION)
EOT

    $postamble{ppd} = <<'EOT';
$(DISTNAME).ppd: all ppd
EOT

    $postamble{cover} = <<'EOT';
cover:
	cover -delete
	mkdir cover_db
	-HARNESS_PERL_SWITCHES=-MDevel::Cover make test
	cover
EOT

    $postamble{critic} = <<'EOT';
critic:
	perlcritic .
EOT

    $postamble{ppm_install} = <<'EOT';
ppm_install: ppm
	ppm install ppm/$(DISTNAME).ppd
EOT

    $postamble{ppm_uninstall} = <<'EOT';
ppm_uninstall:
	ppm uninstall $(DISTNAME)
EOT

    # You will need to add your own entry for README.md
    $postamble{commit} = <<'EOT';
commit: all README.md
	release_pm
	git commit -av
EOT

    $postamble{version_check} = <<'EOT';
all ::
	$(NOECHO) $(FULLPERL) version_check "$(NAME)" "$(DESTINSTALLSITELIB)" "$(VERSION)" "$(VERSION_FROM)"
EOT

undef &postamble;	## no critic (UselessNoCritic AmpersandSigils)
}
{
    package MY;
    sub postamble {
	return shift->SUPER::postamble() . join("\n", @postamble{sort {uc $a cmp uc $b || $a cmp $b } keys %postamble});
    }
}
# END MY

sub settings {
    package MY;
    our %postamble;

    sub init_PM {
        my $self = shift;
	$self->SUPER::init_PM();
        for my $pm (@modules) {
            $self->{PM}{$pm} = "blib/$pm";
        }
    }

    $postamble{config} = <<"EOT";
config :: @modules

@modules :: bin/sssssh t/lib_extract
	\$(NOECHO) \$(FULLPERL) t/lib_extract \$\@ \$<
EOT

    $postamble{README} = <<'EOT';
README.md: bin/sssssh
	pod2readme -f github $< $@

dist: README.md
EOT
}
